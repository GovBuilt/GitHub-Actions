name: .NET Build with Static Code Analysis
description: Builds the .NET solution in the given directory with static code analysis.

inputs:
  directory:
    required: false
    default: .
    description: Path to the directory where a solution file can be found.
  verbosity:
    required: false
    default: quiet
    description: Verbosity parameter for dotnet build.
  enable-code-analysis:
    required: false
    default: "true"
    description: If set to "true", static code analysis is enabled during the build.
  enable-nuget-caching:
    required: false
    default: "false"
    description: >
      If set to "true", the NuGet packages will be cached by GitHub. This is faster if you have a lot of NuGet packages,
      but negligible or even slower if you only have a handful.
  enable-npm-caching:
    required: false
    default: "false"
    description: >
      If set to "true", the NPM packages will be cached by GitHub. This is faster if you have a lot of NPM packages, but
      negligible or even slower if you only have a handful.
  cache-version:
    required: false
    default: "0"
    description: >
      Change this to any other value to alter the cache key, effectively invalidating the latest cache. This is the
      easiest current way to force "clear" the cache
      (https://github.community/t/how-to-clear-cache-in-github-actions/129038/5) until the associated issue
      (https://github.com/actions/cache/issues/2) is resolved and the feature is available not just via the RESTful API.
  publish-version:
    required: false
    default: "1.${{ github.run_number }}.${{ github.run_attempt }}-${{ github.run_id }}"
    description: The value given to `dotnet build`'s `-Version` switch.
  dotnet-build-switches:
    required: false
    default: ""
    description: Additional command line switches given to `dotnet build`. You can split these into multiple lines.
  solution-path:
    required: false
    default: "*.sln"
    description: >
      The path of the solution file to be built. If you have exactly one .sln file in the current directory then this
      can be omitted. Otherwise make sure to specify it to avoid an "MSB1008: Only one project can be specified." error
      that is thrown when the `*.sln` wildcard results in multiple files. The value is given to PowerShell's
      `Get-ChildItem` cmdlet as-is, so grepping is still possible but a name with spaces must be escaped separately.
  expected-code-analysis-errors:
    required: false
    default: ""
    description: >
      If not empty, it indicates that the static code analysis should fail. Then each line should contain one error
      code. The static code analysis should yield these and only these errors. This is ignored if `enable-code-analysis`
      is not "true". You may add a colon and then an explanation of the expected error.

runs:
  using: "composite"
  steps:
    - name: Setup & Detect Cache Configuration
      id: detect-cache-configuration
      shell: pwsh
      run: |
        "${{ github.action_path }}" >> $Env:GITHUB_PATH

        $isNuget = $${{ inputs.enable-nuget-caching == 'true' }}
        $isNpm = $${{ inputs.enable-npm-caching == 'true' }}
        $key = @'
        ${{ github.repository }}-${{ runner.os }}-${{ inputs.cache-version }}-${{ inputs.directory }}
        '@.Trim()

        $hashes = @{
            'nuget' = '${{ hashFiles('**/*.csproj') }}';
            'npm' = '${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}';
            'nugetnpm' = '${{ hashFiles('**/*.csproj', '**/package-lock.json', '**/pnpm-lock.yaml') }}';
        }

        if ($isNuget -and $isNpm)
        {
            $type = 'nugetnpm'
        }
        elseif ($isNuget)
        {
            $type = 'nuget'
        }
        elseif ($isNpm)
        {
            $type = 'npm'
        }
        else
        {
            exit 0
        }

        Write-CacheConfiguration $isNuget $isNpm "${key}-${type}" $hashes[$type]

    - name: Cache NuGet
      uses: actions/cache@v3
      if: ${{ steps.detect-cache-configuration.outputs.cache-enabled == 'true' }}
      with:
        path: ${{ format(steps.detect-cache-configuration.outputs.paths, fromJSON('"\n"')) }}
        key: ${{ steps.detect-cache-configuration.outputs.key }}
        restore-keys: ${{ steps.detect-cache-configuration.outputs.restore-keys }}

    - name: Build and Static Code Analysis
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionWithoutStaticGraph @switches
        $endTime = [DateTime]::Now

        Write-Output ("Solution build took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build without static graph 1
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionWithoutStaticGraph @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build without static graph 1 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build without static graph 2
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionWithoutStaticGraph @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build without static graph 2 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build without static graph 3
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionWithoutStaticGraph @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build without static graph 3 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build without static graph 4
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionWithoutStaticGraph @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build without static graph 4 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build without static graph 5
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionWithoutStaticGraph @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build without static graph 5 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build with static graph 1
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolution @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build with static graph 1 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build with static graph 2
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolution @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build with static graph 2 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build with static graph 3
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolution @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build with static graph 3 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build with static graph 4
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolution @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build with static graph 4 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)

    - name: Build with static graph 5
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        git clean -fxd
        git submodule foreach --recursive git clean -fxd

        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            Solution = (Get-ChildItem ${{ inputs.solution-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolution @switches
        $endTime = [DateTime]::Now

        Write-Output ("Build with static graph 5 took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)
