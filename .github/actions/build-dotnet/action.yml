name: .NET Build with Static Code Analysis
description: Builds the .NET solution in the given directory with static code analysis.

inputs:
  directory:
    required: false
    default: .
    description: Path to the directory where a solution file can be found.
  verbosity:
    required: false
    default: quiet
    description: Verbosity parameter for dotnet build.
  enable-code-analysis:
    required: false
    default: "true"
    description: If set to "true", static code analysis is enabled during the build.
  enable-nuget-caching:
    required: false
    default: "false"
    description: >
      If set to "true", the NuGet packages will be cached by GitHub. This is faster if you have a lot of NuGet packages,
      but negligible or even slower if you only have a handful.
  enable-npm-caching:
    required: false
    default: "false"
    description: >
      If set to "true", the NPM packages will be cached by GitHub. This is faster if you have a lot of NPM packages, but
      negligible or even slower if you only have a handful.
  cache-version:
    required: false
    default: "0"
    description: >
      Change this to any other value to alter the cache key, effectively invalidating the latest cache. You can also
      manage cache entries from the UI, see:
      https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/caching-dependencies-to-speed-up-workflows#deleting-cache-entries.
  publish-version:
    required: false
    default: "1.${{ github.run_number }}.${{ github.run_attempt }}-${{ github.run_id }}"
    description: The value given to `dotnet build`'s `-Version` switch.
  dotnet-build-switches:
    required: false
    default: ""
    description: >
      Additional command line switches given to `dotnet build`. You must split these into multiple lines, even the
      parameter value.
  solution-or-project-path:
    required: false
    default: "*.sln"
    description: >
      The path of the solution or project file to be built. If you have exactly one .sln file in the current directory
      then this can be omitted. Otherwise make sure to specify it to avoid an "MSB1008: Only one project can be
      specified." error that is thrown when the `*.sln` wildcard results in multiple files. To build a project file you
      must specify a path that ends with `.csproj`. An example: "./src/*Web/*.Web.csproj". The value is given to
      PowerShell's `Get-ChildItem` cmdlet as-is, so grepping is still possible but a name with spaces must be escaped
      separately.
  expected-code-analysis-errors:
    required: false
    default: ""
    description: >
      If not empty, it indicates that the static code analysis should fail. Then each line should contain one error
      code. The static code analysis should yield these and only these errors. This is ignored if `enable-code-analysis`
      is not "true". You may add a colon and then an explanation of the expected error.

runs:
  using: "composite"
  steps:
    - name: Setup Scripts
      shell: pwsh
      run: |
        "${{ github.action_path }}" >> $Env:GITHUB_PATH
        (Resolve-Path "${{ github.action_path }}/../../../Scripts").Path >> $Env:GITHUB_PATH

    - name: Setup & Detect Cache Configuration
      id: detect-cache-configuration
      shell: pwsh
      run: |
        $isNuget = $${{ inputs.enable-nuget-caching == 'true' }}
        $isNpm = $${{ inputs.enable-npm-caching == 'true' }}
        $key = @'
        ${{ github.repository }}-${{ runner.os }}-${{ inputs.cache-version }}-${{ inputs.directory }}
        '@.Trim()

        $hashes = @{
            'nuget' = '${{ hashFiles('**/*.csproj') }}';
            'npm' = '${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}';
            'nugetnpm' = '${{ hashFiles('**/*.csproj', '**/package-lock.json', '**/pnpm-lock.yaml') }}';
        }

        if ($isNuget -and $isNpm)
        {
            $type = 'nugetnpm'
        }
        elseif ($isNuget)
        {
            $type = 'nuget'
        }
        elseif ($isNpm)
        {
            $type = 'npm'
        }
        else
        {
            exit 0
        }

        Write-CacheConfiguration $isNuget $isNpm "${key}-${type}" $hashes[$type]

    - name: Cache NuGet
      uses: actions/cache@v3
      if: ${{ steps.detect-cache-configuration.outputs.cache-enabled == 'true' }}
      with:
        path: ${{ format(steps.detect-cache-configuration.outputs.paths, fromJSON('"\n"')) }}
        key: ${{ steps.detect-cache-configuration.outputs.key }}
        restore-keys: ${{ steps.detect-cache-configuration.outputs.restore-keys }}

    - name: Build and Static Code Analysis
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        $buildSwitches = @'
            ${{ inputs.dotnet-build-switches }}
        '@

        $expectedCodeAnalysisErrors = @'
            ${{ inputs.expected-code-analysis-errors }}
        '@

        $switches = @{
            SolutionOrProject = (Get-ChildItem ${{ inputs.solution-or-project-path }}).FullName
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "${{ inputs.publish-version }}"
            Switches = $buildSwitches
            ExpectedCodeAnalysisErrors = $expectedCodeAnalysisErrors
        }

        $startTime = [DateTime]::Now
        Build-DotNetSolutionOrProject @switches
        $endTime = [DateTime]::Now

        Write-Output ("Solution or project build took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)
