name: Create Jira issues for community activities
description: >
  Creates Jira issues for community activities happening on GitHub, like issues, discussions, and pull requests being
  opened. Pull requests are only taken into account if they're not already related to a Jira issue (by starting their
  title with a Jira issue key).

inputs:
  issue-component:
    required: false
    description: Optional component of the issues being created.
  suffix-issue-titles:
    required: false
    default: "true"
    description: >
      If set to "true", Jira issue titles will be suffixed with "in <issue-component>" if the issue-component parameter
      is specified, or the repository name. If set to "false", no suffix will be added to Jira issue titles.

runs:
  using: "composite"
  steps:
    - name: Setup Scripts
      shell: pwsh
      run: |
        "${{ github.action_path }}" >> $Env:GITHUB_PATH
        (Resolve-Path "${{ github.action_path }}/../../../Scripts").Path >> $Env:GITHUB_PATH

    # Don't do anything for pull requests that are already related to an issue, i.e. their titles start with an issue
    # key.
    - name: Check for Jira Issue-Related Pull Request
      id: issue-related-pr
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      shell: pwsh
      run: |
        $output = "${{ github.event.pull_request }}" -eq "" ? "False" : (Confirm-PullRequestTitle "$Env:PR_TITLE") -or $Env:GITHUB_HEAD_REF -Like "*issue*"
        Set-GitHubOutput "is-issue-pr" $output

    - name: Login to Jira
      if: steps.issue-related-pr.outputs.is-issue-pr == 'False'
      # v3
      uses: atlassian/gajira-login@ca13f8850ea309cf44a6e4e0c49d9aa48ac3ca4c
      env:
        JIRA_BASE_URL: ${{ env.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ env.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ env.JIRA_API_TOKEN }}

    - name: Initialize Jira Issue Templates
      if: steps.issue-related-pr.outputs.is-issue-pr == 'False'
      shell: pwsh
      run: Initialize-IssueTemplates

    - name: Initialize Jira Issue Details
      if: steps.issue-related-pr.outputs.is-issue-pr == 'False'
      id: issue-details
      env:
        # Necessary to pass this via an environment variable, because when assigned directly to a variable in the
        # script, it can cause escaping issues with backtick characters (like a "`ulong..." causing "The Unicode escape
        # sequence is not valid."). Also, the github context contains user input and thus shouldn't be used inline in
        # scripts to prevent script injection.
        GITHUB_JSON: ${{ toJSON(github) }}
      shell: pwsh
      run: |
        $github = $Env:GITHUB_JSON | ConvertFrom-Json

        $templates = Initialize-IssueTemplates

        Initialize-IssueDetails $github `
            "${{ inputs.issue-component }}" `
            $([System.Convert]::ToBoolean("${{ inputs.suffix-issue-titles }}")) `
            $templates["DISCUSSION_JIRA_ISSUE_DESCRIPTION"] `
            $templates["ISSUE_JIRA_ISSUE_DESCRIPTION"] `
            $templates["PULL_REQUEST_JIRA_ISSUE_DESCRIPTION"]

        $fields = @"
        {"labels": ["created-from-github"]
        "@

        if ("${{ inputs.issue-component }}" -ne "")
        {
            $fields += ', "components": [{"name": "${{ inputs.issue-component }}"}]'
        }

        $fields += '}'

        Set-GitHubOutput "fields" $fields

    - name: Create Jira Issue
      if: steps.issue-related-pr.outputs.is-issue-pr == 'False'
      id: create-issue
      # v3
      uses: atlassian/gajira-create@1ff0b6bd115a780592b47bfbb63fc4629132e6ec
      with:
        project: ${{ env.JIRA_PROJECT_KEY }}
        issuetype: ${{ steps.issue-details.outputs.type }}
        summary: ${{ steps.issue-details.outputs.summary }}
        description: ${{ fromJSON(steps.issue-details.outputs.json-description) }}
        fields: ${{ steps.issue-details.outputs.fields }}

    - name: Add Remote Link to Jira Issue
      if: steps.issue-related-pr.outputs.is-issue-pr == 'False'
      shell: pwsh
      run: |
        $linkProperties = @{
            object = @{
                url = '${{ steps.issue-details.outputs.link-url }}'
                title = '${{ steps.issue-details.outputs.link-title }}'
            }
        }
        $authorizationBytes = [Text.Encoding]::ASCII.GetBytes('${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}')
        $authorizationBytesBase64 = [Convert]::ToBase64String($authorizationBytes)
        $requestParameters = @{
            Uri = '${{ env.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.create-issue.outputs.issue }}/remotelink'
            Method = 'POST'
            ContentType = 'application/json'
            Headers = @{
                Accept = 'application/json'
                Authorization = "Basic $authorizationBytesBase64"
            }
            Body = ConvertTo-Json($linkProperties)
        }

        Invoke-WebRequest @requestParameters

    - name: Update GitHub Issue
      if: steps.issue-related-pr.outputs.is-issue-pr == 'False' && github.event.issue
      # v3.3.3
      uses: actions-cool/issues-helper@275328970dbc3bfc3bc43f5fe741bf3638300c0a
      with:
        actions: "update-issue"
        token: ${{ env.GITHUB_TOKEN }}
        issue-number: ${{ github.event.issue.number }}
        title: ${{ github.event.issue.title }} (${{ steps.create-issue.outputs.issue }})
        body: "${{ github.event.issue.body }}\n\n[Jira issue](${{ env.JIRA_BASE_URL }}/browse/${{ steps.create-issue.outputs.issue }})"
        update-mode: "replace"
